{"version":3,"sources":["App.js","components/jumbotron/index.js","components/scoreHeader/index.js","components/memoryCard/index.js","components/cardContainer/index.js","serviceWorker.js","index.js"],"names":["bigScore","wrong","Jumbotron","react_default","a","createElement","className","Component","ScoreHeader","this","props","score","highScore","MemoryCard","style","border","alt","name","src","image","height","onClick","cardClick","id","Container","children","keyList","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","images","topScore","cardShuffle","shuffle","setState","key","myKey","includes","console","log","push","bind","assertThisInitialized","_this2","cardContainer","jumbotron","scoreHeader","map","memoryCard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c8f82ca7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport images from \"./images.json\";\nimport \"./App.css\";\nimport Jumbotron from \"./components/jumbotron/index\";\nimport ScoreHeader from \"./components/scoreHeader/index\";\nimport MemoryCard from \"./components/memoryCard/index\";\nimport Container from \"./components/cardContainer/index\";\nimport shuffle from 'shuffle-array';\nlet keyList = [];\nlet bigScore;\nlet wrong;\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.cardShuffle = this.cardShuffle.bind(this);\n    this.cardClick = this.cardClick.bind(this);\n    this.highScore = this.highScore.bind(this);\n  }\n  \n  state = {\n    images,\n    score: 0,\n    topScore: 0\n  }\n\n  highScore = (state) => {\n    this.state.score >= this.state.topScore ? \n      bigScore = (this.state.score) +1 : bigScore = this.state.topScore;\n    }\n  \n\n  cardShuffle = (state) => {\n    shuffle(this.state.images);\n    this.setState ({\n      images\n    })\n  }\n\n  \n  \n\n  cardClick = (id) => {\n    // console.log(id);\n    let key = id;\n    let score = this.state.score;\n    let myKey = key;\n    \n    // console.log(myKey)\n\n    if (!keyList.includes(myKey)) {\n      \n      score++;\n      this.setState({\n        score: score\n      });\n      this.highScore(this.state);\n      this.setState({\n        topScore: bigScore\n      });\n      console.log(this.state.topScore)\n      // console.log(\"key \" + key)\n      keyList.push(myKey);\n      // console.log(\"keyList: \" + keyList)\n      // console.log(\"Object BEFORE\" + JSON.stringify(this.state.images));\n      this.cardShuffle(this.state);\n      wrong = false;\n      // console.log(\"Object \" + JSON.stringify(this.state.images[id -1]));\n      \n    } else {\n      score = 0\n      keyList = [];\n      this.setState ({\n        score: score\n      });\n      wrong = true;\n\n    } \n  }\n\n  render() {\n    // console.log(\"Object AFTER\" + JSON.stringify(this.state.images));\n    return (\n      <Container>\n        <Jumbotron />\n        <ScoreHeader score={this.state.score} highScore={this.state.topScore}/>\n        {this.state.images.map(image => (\n          <MemoryCard\n          wrong={wrong}\n          cardClick={this.cardClick} \n          cardShuffle={this.cardShuffle}\n          key={image.id} \n          id={image.id}\n          name={image.name} \n          image={image.image} \n          />\n        ))}\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport \"./style.css\";\n\nclass Jumbotron extends Component {\n    render() {\n    return (\n        <div className=\"jumbotron jumbotron-fluid bg-dark heading\">\n          <h1>Memory Game</h1>\n          <h3>Click as many images as you can without clicking the same image twice. </h3>\n        </div>\n    )\n    }\n}\n\nexport default Jumbotron;","import React, { Component } from 'react';\nimport \"./style.css\";\n\nclass ScoreHeader extends Component {\n    render() {\n        return (\n            <div className=\"jumbotron jumbotron-fluids score-area\">\n                <h2>YOUR SCORE: {this.props.score}  <span className=\"topScore\"> YOUR TOP SCORE: {this.props.highScore}</span></h2>\n            </div>\n        )\n    }\n}\n\nexport default ScoreHeader;","import React from \"react\";\nimport \"./style.css\";\n\nconst MemoryCard = props => {\n  const stylesWrong = {\n    border: '5px solid red'\n  \n  };\n  const stylesRight = {\n    border: 'none'\n  }\n    // console.log(JSON.stringify(props))\n  return (\n    <div className=\"card\" style={props.wrong === true ? stylesWrong : stylesRight}>\n      <span >\n        <div className=\"card-img card-body\">\n          <img alt={props.name} src={props.image} height=\"160\" className=\"image\" onClick={() => { props.cardClick(props.id)}}/>\n        </div>\n      </span>\n    </div>\n  );\n};\n\nexport default MemoryCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst Container = (props) => {\nreturn <div className=\"container container-fluid wrapper\">{props.children}</div>\n}\n\nexport default Container;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}